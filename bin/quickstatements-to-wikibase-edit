#!/usr/bin/env node
const { program } = require('commander')

program
.argument('<quickstatements-file>', 'A file containing commands in QuickStatements format')
.option('-r, --reconciliation <reconciliation-mode>', 'Set the behavior that should be used when an edit value already exists. Possible values: skip-on-any-value, skip-on-value-match, merge, none. See wikibase-edit documentation https://github.com/maxlath/wikibase-edit/blob/main/docs/how_to.md#reconciliation-modes', 'merge')
.parse()

const options = program.opts()
const [ file ] = program.processedArgs

const { reconciliation: reconciliationMode } = options
const reconciliation = { mode: reconciliationMode }
const convertOptions = { reconciliation }

const { createHexHash, writeCommands } = require('../lib/utils')
const { readFile } = require('fs').promises
const path = require('path')
const convert = require('../lib/convert')

const convertAndGenerateCommandsFiles = async input => {
  const hash = createHexHash(input)
  const { edits, creations, merges } = convert(input, convertOptions)
  await writeCommands('edits', edits, hash)
  await writeCommands('creations', creations, hash)
  await writeCommands('merges', merges, hash)
}

if (file) {
  const filepath = path.resolve(process.cwd(), file)
  readFile(filepath)
  .then(buf => convertAndGenerateCommandsFiles(buf.toString()))
  .catch(console.error)
} else {
  let text = ''
  process.stdin
  .on('data', buf => text += buf.toString())
  .on('close', () => convertAndGenerateCommandsFiles(text))
  .on('error', err => {
    if (err.code !== 'EPIPE') console.error(err)
  })
}

